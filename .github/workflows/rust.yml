name: Rust

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash
    
jobs:
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Init submodules
  #        uses: snickerbockers/submodules-init@v4
  #      - name: Cargo cache
  #        uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ./target
  #          key: test-cargo-registry
  #      - name: List
  #        run: find ./
  #      - name: Run tests
  #        run: cargo test --verbose

  build:
    name: Build ${{ matrix.TARGET }}
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          #- TARGET: i686-unknown-linux-gnu # test in an alpine container on a mac
          #  OS: ubuntu-latest
          #  FEATURES: default
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: armv7-unknown-linux-musleabi # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: arm-unknown-linux-musleabi # raspberry pi 0-1, not tested
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: default
          - TARGET: aarch64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: default
          - TARGET: i686-pc-windows-msvc # tested on a windows machine
            OS: windows-2019
            FEATURES: default
          - TARGET: x86_64-pc-windows-msvc # tested on a windows machine
            OS: windows-latest
            FEATURES: default
          - TARGET: aarch64-pc-windows-msvc
            OS: windows-latest
            FEATURES: default
          - TARGET: mipsel-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: mips-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: default
          - TARGET: x86_64-unknown-freebsd
            OS: ubuntu-latest
            ARTIFACT_NAME: freebsd-13.2-x86_64
            FEATURES: default
            BSD_VERSION: 13.2
    # needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: NetLink # change with the name of your project
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - uses: actions/checkout@v4
      - name: Init submodules
        run: git submodule update --init --recursive --remote && git submodule status
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Use strawberry perl
        if: startsWith(matrix.os, 'windows')
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
      - name: Build web
        run: |
          cd web-app
          npm install
          npm run build
          cd ..
          rm -rf ./static/*
          cp -r ./web-app/dist/* ./static/
      - name: List
        run: find ./
      - name: Build NetLink X86_64-FreeBSD
        uses: cross-platform-actions/action@v0.23.0
        if: ${{ endsWith(matrix.TARGET, 'freebsd') }}
        env:
          TARGET: ${{ matrix.TARGET }}
        with:
          operating_system: freebsd
          environment_variables: TARGET
          architecture: x86-64
          version: ${{ matrix.BSD_VERSION }}
          shell: bash
          memory: 5G
          cpu_count: 4
          run: |
            uname -a
            echo $SHELL
            pwd
            ls -lah
            whoami
            env | sort

            sudo pkg install -y git protobuf
            curl --proto 'https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source $HOME/.cargo/env

            rustup set auto-self-update disable

            rustup install 1.77
            rustup default 1.77

            export CC=clang
            export CXX=clang++
            export CARGO_TERM_COLOR=always

            cargo build --release --verbose --target $TARGET
      - name: Install and configure dependencies
        if: ${{ ! endsWith(matrix.TARGET, 'freebsd') }}
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          rustup set auto-self-update disable
          
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install clang llvm libc6-dev-i386 crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools libboost-all-dev libc6-dev -y
            #  curl -s musl.cc | grep mipsel
            case $TARGET in 
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-muslsf-cross
                arch=mipsel-linux-muslsf
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;    
              armv7-unknown-linux-musleabi)
                MUSL_URI=armv7m-linux-musleabi-cross
                ;;   
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;    
              arm-unknown-linux-musleabi)
                MUSL_URI=arm-linux-musleabi-cross
                ;;        
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-muslsf-cross
                arch=mips-linux-muslsf
                ;;
            esac
          
          
            if [  -n "$MUSL_URI" ]; then
              mkdir -p /opt/musl_gcc 
              wget -c https://musl.cc/$MUSL_URI.tgz -P /opt/musl_gcc/
              tar zxf /opt/musl_gcc/$MUSL_URI.tgz -C /opt/musl_gcc/
              sudo ln -s /opt/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
            fi
          fi
          if [[ $TARGET =~ ^mips.*$ ]]; then
            # mips平台使用1.71.1版本
            #rustup install 1.71.1
            #rustup default 1.71.1  
            cd /opt/musl_gcc/${arch}-cross/lib/gcc/${arch}/11.2.1
            rustup toolchain install nightly-x86_64-unknown-linux-gnu
            rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
            RUST_LIB_SRC=$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/
            if [[ -f $RUST_LIB_SRC/library/Cargo.lock && ! -f $RUST_LIB_SRC/Cargo.lock ]]; then 
               cp -f $RUST_LIB_SRC/library/Cargo.lock $RUST_LIB_SRC/Cargo.lock
            fi
          elif [[ $OS =~ ^windows.*$ ]]; then
            # Windows 平台使用 1.77 版本
            rustup install 1.77.0
            rustup default 1.77.0
          fi
          rustup -V
          
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config.toml <<EOF
          [target.x86_64-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]
          [target.armv7-unknown-linux-musleabihf]
          linker = "armv7l-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]
          [target.armv7-unknown-linux-musleabi]
          linker = "armv7m-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]   
          [target.arm-unknown-linux-musleabi]
          linker = "arm-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]
          [target.mipsel-unknown-linux-musl]
          linker = "mipsel-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
          "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
          "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/mipsel-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/lib/gcc/mipsel-linux-muslsf/11.2.1"]
          [target.mips-unknown-linux-musl]
          linker = "mips-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
          "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
          "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/mips-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/lib/gcc/mips-linux-muslsf/11.2.1"]
          [target.x86_64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]    
          [target.i686-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]      
          [target.x86_64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"] 
          [target.aarch64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]     
          [target.i686-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]    
          [target.i686-unknown-linux-gnu]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C","link-dead-code"]   
          EOF
      - name: Install rust target
        if: ${{ ! endsWith(matrix.TARGET, 'freebsd') && ! startsWith(matrix.TARGET, 'mips') }}
        run: |
          if [[ $TARGET =~ ^mips.*$ ]]; then
            cargo +nightly build --release --verbose --target $TARGET -Z build-std=std,panic_abort --features $FEATURES
          else
            cargo build --release --verbose --target $TARGET --features $FEATURES
          fi
      - name: Run build NetLink
        if: ${{ ! endsWith(matrix.TARGET, 'freebsd') }}
        run: cargo build --release --verbose --target $TARGET --features $FEATURES
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC_NETLINK=net_link.exe
              NETLINK=netlink.exe
          else
              EXEC_NETLINK=net_link
              NETLINK=netlink
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC_NETLINK ./$NETLINK
          mkdir ./artifacts/upload_file
          tar -czf ./artifacts/upload_file/netlink-$TARGET-$TAG.tar.gz ./$NETLINK
      - name: List target NetLink
        run: find ./artifacts
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: NetLink-${{ matrix.TARGET }}
          path: |
            ./artifacts/upload_file
  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifacts/*/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
